(function (a, b) { if (typeof module == "object" && module.exports) { module.exports = b() } else { if (typeof define == "function" && define.amd) { define(b) } else { a.JSM = b() } } }(this, function () { function c(f) { for (var d = 1; d < arguments.length; d++) { var e = arguments[d]; for (var g in e) { if (f[g] === undefined) { f[g] = e[g] } } } return f } var b = {}; function a() { $.ex = window.external; $(window).bind("beforeunload", function () { var d, e = $.jsm; d = e.ws; if (d.readyState !== undefined && d.readyState == 1) { e.log("JSM::WEBSOCKET CLOSE"); d.close() } }); $.dlg = function (f, d) { var e = function () { if (typeof d !== "undefined" && d != null) { $.confirm(f, function (g) { if (g) { if (typeof d === "string" && d == "exit") { (typeof $.ex.Close !== "undefined") ? $.ex.Close() : open(location, "_self").close() } else { d() } } return true }).cancel("\u53d6\u6d88").ok("\u786e\u5b9a") } else { $.alert(f) } }; window.setTimeout(e, 0); return false }; this.opts = c({}, a.defaults, b); console.log("JSM INIT ") } a.defaults = {}; a.serverurl = "192.168.100.22:8000/pusher/?ch=1200&push=Temperature&data=debug"; String.prototype.rpl = function () { return this.replace(/\#/g, "") }; c(a.prototype, { version: "1.0.0", user: { ID: 0, Nickname: "anonymous", Token: "", Enable: false, Role: 0, authenticated: false, isSuper: function () { return this.Role && this.Role == 9 } }, loadCSS: function (e) { var d = $("<link>"); $("head").append(d); d.attr({ rel: "stylesheet", type: "text/css", href: e }) }, getMultiCSS: function (d, f) { var e = $.map(d, function (g) { return $.jsm.loadCSS((f || "") + g) }); e.push($.Deferred(function (g) { $(g.resolve) })); return $.when.apply($, e) }, getMultiScripts: function (d, f) { var e = $.map(d, function (g) { return $.getScript((f || "") + g) }); e.push($.Deferred(function (g) { $(g.resolve) })); return $.when.apply($, e) }, api: { config: { url: a.serverurl }, init: function (d) { this.config = $.extend(true, this.config, d); return this }, isJSON: function (g) { if (typeof g == "string") { try { var f = JSON.parse(g); if (typeof f == "object" && f) { return f } else { return null } } catch (d) { return null } } }, connect: function () { var d = (window.location.protocol == "http:") ? "ws://" : "wss://"; this.host = d + this.config.url; window.WebSocket = window.WebSocket || window.MozWebSocket; if (!window.WebSocket) { this.error("Error: WebSocket is not supported ."); return } this.socket = new WebSocket(this.host); this.socket.onopen = function () { $.jsm.api.onopen() }; this.socket.onmessage = function (e) { var g = $.jsm.api; var f = g.isJSON(e.data); if (f == null) { f = { code: 0, flag: 0, data: "" } } g.onmessage(f) }; this.socket.onclose = function () { $.jsm.api.onclose(); $.jsm.api.socket = null }; this.socket.onerror = function (e) { $.jsm.api.onerror(e) }; return this }, error: function (d) { this.onerror = d; return this }, send: function (d) { if (this.socket) { this.socket.send(d); return true } this.error("please connect to the server first !!!"); return false }, receive: function (d) { this.onmessage = d; return this }, close: function () { if (this.socket != undefined && this.socket != null) { this.socket.close() } else { this.error("this socket is not available") } }, onmessage: function (d) { }, onopen: function () { }, onclose: function () { }, onerror: function () { } }, urlsafe_b64encode: function (d) { return Base.encode(d).replace(/\+/g, "-").replace(/\//g, "_").replace(/[=]+/, "") }, urlsafe_b64decode: function (e) { var d = e.replace(/\-/g, "+").replace(/\_/g, "/"); var f = d.length % 4; if (f > 0) { d += "====".substr(f) } return Base.decode(d) } }); return a }));
